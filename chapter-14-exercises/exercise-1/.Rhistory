# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
install.packages("httr")
install.packages("jsonlite")
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
#install.packages("httr")
#install.packages("jsonlite")
library("jsonlite")
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
#install.packages("httr")
#install.packages("jsonlite")
library("httr")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/{org}/repos{?type,page,per_page,sort}"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
response
print(response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
body <- content(response, "text")
# Convert the content variable from a JSON string into a data frame.
repos <- fromJSON(body)
repos
repos
# Convert the content variable from a JSON string into a data frame.
repos <- fromJSON(body)
repos
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "{org}/repos{?type,page,per_page,sort}"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
print(response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
body <- content(response, "text")
# Convert the content variable from a JSON string into a data frame.
repos <- fromJSON(body)
repos
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "users/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
print(response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
body <- content(response, "text")
# Convert the content variable from a JSON string into a data frame.
repos <- fromJSON(body)
repos
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/users/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
print(response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
body <- content(response, "text")
# Convert the content variable from a JSON string into a data frame.
repos <- fromJSON(body)
repos
View(repos)
# How many (public) repositories does the organization have?
print(nrow(repos))
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- GET(paste0(base_uri, search_endpoint))
source('~/Info201/book-exercises/chapter-14-exercises/exercise-1/exercise.R', echo=TRUE)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories?q=dplyr"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- GET(paste0(base_uri, search_endpoint))
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- paste0(base_uri, search_endpoint)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
result <- GET(query_params)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
res_body <- content(result, "text")
res_repos <- fromJSON(body)
res_repos <- fromJSON(res_body)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
View(res_repos)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
print(nrow(res_repos))
